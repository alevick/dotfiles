# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
# put history substitution commands on command line, instead of instantly executing
shopt -s histappend histverify

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=1000
export HISTFILESIZE=2000
export LSCOLORS="ExGxBxDxCxEgEdxbxgxcxd"

# Editor choice for crontab
export EDITOR=vim

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

else
    # This is for the OSX users that can't "--color" and don't have dircolors
    alias ls='ls -G'
    alias parallel-ssh='pssh'
fi

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bashrc_aliases ]; then
    . ~/.bashrc_aliases
fi

if [ -f ~/.bashrc_functions ]; then
    . ~/.bashrc_functions
fi

# Local aliases that shouldn't be checked into dotfiles repo
if [ -f ~/.bashrc_local ]; then
    . ~/.bashrc_local
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

md5sum='md5sum'
if ! [ `which md5sum` ]; then
    md5sum='md5'
fi

for i in `seq 0 7`; do
    colors[i]=$(($i + 30)) # regular colors
    colors[$(($i+8))]=$(($i + 90)) # high intensity colors
done
num_colors=16

### Git stuff

# Author/committer settings
export GIT_AUTHOR_EMAIL=`cat ~/.git_email`
export GIT_AUTHOR_NAME='Aaron Levick'
export GIT_COMMITTER_EMAIL=`cat ~/.git_email`
export GIT_COMMITTER_NAME='Aaron Levick'

# git branch tab completion on OSX
architecture=`uname -a`
if [[ ! "$architecture" = *'Linux'* ]]; then
    completion=~/.git-completion.bash
    test ! -f $completion  && curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o $completion
    . $completion
fi
# Use mergetool to see difference between two branches
function mergeview() {
    branch=$1
    git merge origin/$branch --no-commit
    git difftool --staged
}

### Sick command prompt colors broh
calc_color() {
    hash=$1
    offset=$2
    index=`echo "($hash+$offset) % $num_colors" | bc`
    echo ${colors[$index]}
}

offset=15
offset2=0

aaronhash=`echo 'alevick' | $md5sum | cut -d' ' -f1 | tr -d '[a-z]'`
aaroncolor=`calc_color $aaronhash $offset`

role=`if [ -f /mnt/.installed_role ]; then cat /mnt/.installed_role; else echo 'alevick'; fi`
#hash=`echo ${USER}$(curl -m 1 -s 169.254.169.254/latest/meta-data/instance-id) | $md5sum | cut -d' ' -f1 | tr -d '[a-z]'`
hash=`echo $USER | $md5sum | cut -d' ' -f1 | tr -d '[a-z]'`
color=`calc_color $hash $offset`
hash2=`echo $role | $md5sum | cut -d' ' -f1 | tr -d '[a-z]'`
color2=`calc_color $hash2 $offset2`
style=`echo "$hash % 3" | bc`  

if [ $color -eq $aaroncolor -a $USER != 'alevick' -a $USER != 'aaron.levick' ]; then
    color=`calc_color $hash $(($offset +1))`
    color2=`calc_color $hash2 $(($offset2 +1))`
fi

PS1="\[\e[$style;${color2}m\][\t]\[\e[0;${color}m\]\u@\h:\[\e[$style;${color2}m\]\w$\[\e[0m\] "

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
if ! [ `echo $PATH | grep '/usr/local/bin'` ]; then
    export PATH="/usr/local/bin:$PATH"
fi

### Added for Rust
export PATH="$PATH:~/.cargo/bin/"

# Make sure ssh alias configs are tab completable
if [ -e $HOME/.ssh/config ]; then
    complete -o default -o nospace -W "$(/usr/bin/env ruby -ne 'puts $_.split(/[,\s]+/)[1..-1].reject{|host| host.match(/\*|\?/)} if $_.match(/^\s*Host\s+/);' < $HOME/.ssh/config)" scp sftp ssh
fi

#if [ "$role" != "alevick" ]; then
#    export PROMPT_COMMAND='echo -ne "\033]0;'$role'\007"'
#fi
